"""
Django settings for knight_cap project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import socket
from pathlib import Path

from decouple import Csv, config
from dj_database_url import parse as db_url
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


SECRET_KEY = config("SECRET_KEY")

DEBUG = config("DEBUG", cast=bool, default=False)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv(post_process=list), default=[])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "django.contrib.sites",
    # Third party apps
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "widget_tweaks",
    "ckeditor",
    "django_social_share",
    "django_filters",
    "django_comments",
    # Local apps
    "auser",
    "blog",
    "comment",
    "forum",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "knight_cap.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "knight_cap.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": config(
        "DATABASE_URL", default="sqlite:///" + str(BASE_DIR) + "db.sqlite3", cast=db_url
    )
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/assets/"

STATIC_ROOT = BASE_DIR / "assetts"

MEDIA_URL = "/upload/"

MEDIA_ROOT = BASE_DIR / "upload"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# The ID, as an integer, of the current site in the django_site database table.

SITE_ID = 1


AUTH_USER_MODEL = "auser.User"
# A list of authentication backend classes to use when attempting to authenticate a user.

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# django-allauth settings
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 5 * 60
ACCOUNT_USERNAME_BLACKLIST = config(
    "RESERVED_USERNAMES", cast=Csv(post_process=list), default=[]
)

# This setting defines the additional locations the staticfiles app will traverse
STATICFILES_DIRS = (BASE_DIR / "static",)

SOCIALACCOUNT_PROVIDERS = {
    "github": {
        "SCOPE": [
            "user",
            "repo",
            "read:org",
        ],
    }
}

MESSAGE_TAGS = {
    messages.DEBUG: "alert-secondary",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}


FILTERS_VERBOSE_LOOKUPS = {
    "exact": "",
    "iexact": "",
    "contains": "",
    "icontains": "",
}

# An app which provides customization of the comments framework
COMMENTS_APP = "comment"


EMAIL_HOST = socket.gethostbyname("smtp.gmail.com")

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

SERVER_EMAIL = config("SERVER_EMAIL")

EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)

# EMAIL_HOST = config("EMAIL_HOST", default="localhost", cast=str)

EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="", cast=str)

EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="abn", cast=str)

EMAIL_PORT = config("EMAIL_PORT", default=25, cast=int)


# if DEBUG:
#     # The backend to use for sending emails.
#     EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"

#     # The directory used by the file email backend to store output files.
#     EMAIL_FILE_PATH = BASE_DIR / "emails"
