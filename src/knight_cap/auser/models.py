"""
	Object Relation Maps (ORM) of users authentication and authorization.

	Generated By: django-admin startapp 
	Last Modified By: Wendirad Demelash 
"""

from django.contrib.auth.base_user import AbstractBaseUser
from django.contrib.auth.models import (Permission, PermissionsMixin,
                                        UserManager)
from django.contrib.auth.validators import UnicodeUsernameValidator
from django.contrib.sites.managers import CurrentSiteManager
from django.contrib.sites.models import Site
from django.db import models
from django.utils.text import slugify
from django.utils.translation import gettext_lazy as _

from auser.validators import PhoneNumberValidator


class Address(models.Model):
    """
    An abstract class which represent composite attribute 'Address'
    for sub classes.
    """

    email = models.EmailField(
        _("email"),
        unique=True,
    )
    phone_number = models.CharField(
        _("phone number"),
        max_length=13,
        unique=True,
        validators=[PhoneNumberValidator()],
    )
    location = models.CharField(
        _("address"),
        max_length=200,
        blank=True,
        null=True,
        help_text=_("Physical location."),
    )
    po_box = models.CharField(_("P.O Box"), max_length=10, blank=True, null=True)

    class Meta:
        abstract = True


class User(AbstractBaseUser, PermissionsMixin, Address):
    """
    Implementation of base User. Used as superuser.
    """

    class SexChoices(models.TextChoices):
        MALE = "M", _("MALE")
        FEMALE = "F", _("FEMALE")

    username_validator = UnicodeUsernameValidator()
    username = models.CharField(
        _("username"),
        max_length=150,
        unique=True,
        help_text=_(
            "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
        ),
        validators=[username_validator],
        error_messages={
            "unique": _("A user with that username already exists."),
        },
    )
    first_name = models.CharField(_("first name"), max_length=150)
    last_name = models.CharField(_("last name"), max_length=150)
    sex = models.CharField(
        _("sex"), max_length=2, choices=SexChoices.choices, blank=True, null=True
    )
    bio = models.TextField(
        _("Bio"), help_text=_("Tell us about your self"), null=True, blank=True
    )
    profile_picture = models.ImageField(
        _("Profile picture"), upload_to="profile_pictures/", default="default.svg"
    )
    is_staff = models.BooleanField(
        _("staff status"),
        default=False,
        help_text=_("Designates whether the user can log into this admin site."),
    )
    is_active = models.BooleanField(
        _("active"),
        default=True,
        help_text=_(
            "Designates whether this user should be treated as active. "
            "Unselect this instead of deleting account"
        ),
    )
    host_site = models.ForeignKey(
        Site, verbose_name=_("site"), on_delete=models.CASCADE, default=1
    )
    date_joined = models.DateTimeField(_("date joined"), auto_now_add=True)

    objects = UserManager()

    USERNAME_FIELD = "username"
    EMAIL_FIELD = "email"
    REQUIRED_FIELDS = ["email", "sex", "phone_number"]

    class Meta:
        verbose_name = _("user")
        verbose_name_plural = _("users")
        db_table = "user"

    def get_full_name(self):
        """
        Returns the first_name plus the last_name, with a space in between.
        """
        full_name = "%s %s" % (self.first_name, self.last_name)
        return full_name.strip()


class Club(User):
    """
    Top level user of club.  Used as club system administrator.
    """

    name = models.CharField(
        _("Club name"), max_length=100, help_text=_("Club long name.")
    )
    slug = models.SlugField(editable=False, unique=True)
    short_name = models.CharField(
        _("Club short name"), max_length=50, help_text=_("Club short name.")
    )
    logo = models.ImageField(
        _("Club logo"), upload_to="clubs/logos", blank=True, null=True
    )
    description = models.TextField(_("Club description"), blank=True, null=True)

    class Meta:
        verbose_name = _("club")
        verbose_name_plural = _("clubs")
        db_table = "club"
        permissions = (
            ("activate_club", "Can activate club"),
            ("deactivate_club", "Can deactivate club"),
        )

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super().save(*args, **kwargs)


class Division(models.Model):
    """
    Division or Sub-Division of a club. Used to group members.
    """

    name = models.CharField(
        _("Division name"),
        max_length=100,
        help_text=_("Division long name."),
        unique=True,
    )
    slug = models.SlugField(editable=False, unique=True)
    short_name = models.CharField(
        _("Division short name"), max_length=50, help_text=_("Division short name.")
    )
    logo = models.ImageField(
        _("Division logo"), upload_to="divisions/logos", blank=True, null=True
    )
    description = models.TextField(_("Division description"), blank=True, null=True)
    club = models.ForeignKey(Club, on_delete=models.CASCADE, related_name="divisions")
    parent = models.ForeignKey(
        "self",
        on_delete=models.CASCADE,
        related_name="sub_divisions",
        blank=True,
        null=True,
    )

    members_permissions = models.ManyToManyField(
        Permission, related_name="members_permissions", blank=True
    )
    head_permissions = models.ManyToManyField(
        Permission, related_name="head_permissions", blank=True
    )

    class Meta:
        verbose_name = _("division")
        verbose_name_plural = _("divisions")
        db_table = "division"
        unique_together = [("club", "name")]

    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super().save(*args, **kwargs)


class Position(models.Model):
    """
    Intermidiate model between User and Position. Used to assign position to user.
    """

    class Status(models.TextChoices):
        ACTIVE = "active", _("Active")
        INACTIVE = "inactive", _("Inactive")
        DELETED = "deleted", _("Deleted")

    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="user_positions"
    )
    division = models.ForeignKey(
        Division, on_delete=models.CASCADE, related_name="position"
    )
    status = models.CharField(
        _("Status"), max_length=10, choices=Status.choices, default=Status.ACTIVE
    )
    date_assigned = models.DateTimeField(_("date joined"), auto_now_add=True)
    date_modified = models.DateTimeField(_("date modified"), auto_now=True)

    class Meta:
        verbose_name = _("user position")
        verbose_name_plural = _("user positions")
        db_table = "user_position"

    def __str__(self):
        return self.user.get_full_name() + " - " + self.position.name
